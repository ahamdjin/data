// Run `npx prisma migrate dev --name init` after updating this schema

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

model Organization {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  memberships    Membership[]
  apiKeys        ApiKey[]
  datasets       Dataset[]
  fhirResources  FhirResource[]
  documents      Document[]
  documentChunks DocumentChunk[]
}

model Membership {
  id             String   @id @default(uuid())
  userId         String
  organizationId String
  role           String
  createdAt      DateTime @default(now())

  organization Organization @relation(fields: [organizationId], references: [id])

  @@unique([userId, organizationId])
}

model ApiKey {
  id             String    @id @default(uuid())
  organizationId String
  name           String
  hashedKey      String
  createdAt      DateTime  @default(now())
  lastUsedAt     DateTime?
  disabled       Boolean   @default(false)

  organization Organization @relation(fields: [organizationId], references: [id])
}

model Dataset {
  id             String @id @default(uuid())
  organizationId String
  name           String
  meta           Json?

  organization   Organization    @relation(fields: [organizationId], references: [id])
  documents      Document[]
  documentChunks DocumentChunk[]

  @@index([organizationId])
}

model Document {
  id             String   @id @default(uuid())
  organizationId String
  datasetId      String
  source         String
  mimeType       String?
  title          String?
  meta           Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization    @relation(fields: [organizationId], references: [id])
  dataset      Dataset         @relation(fields: [datasetId], references: [id])
  chunks       DocumentChunk[]

  @@index([organizationId])
  @@index([datasetId])
}

model DocumentChunk {
  id             String                @id @default(uuid())
  organizationId String
  datasetId      String
  documentId     String
  ordinal        Int
  content        String                @db.Text
  embedding      Unsupported("vector")
  meta           Json?
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id])
  dataset      Dataset      @relation(fields: [datasetId], references: [id])
  document     Document     @relation(fields: [documentId], references: [id])

  @@unique([documentId, ordinal])
  @@index([organizationId])
  @@index([datasetId])
  @@index([documentId])
}

model FhirResource {
  id             String                @id @default(cuid())
  resourceType   String
  patientId      String?
  encounterId    String?
  rawJson        Json
  chunkText      String                @db.Text
  embedding      Unsupported("vector")
  organizationId String
  createdAt      DateTime              @default(now())

  organization Organization @relation(fields: [organizationId], references: [id])

  @@index([patientId])
  @@index([organizationId])
}

model Secret {
  id        String   @id @default(cuid())
  source    String
  key       String
  value     String
  createdAt DateTime @default(now())
}
